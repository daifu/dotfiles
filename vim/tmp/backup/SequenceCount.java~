import java.util.*;

import static java.util.Map.Entry;

// a MapReduce job that produces, for each 5-word sequence in the given
// files, the number of times that sequence appears
public class SequenceCount {
		
    public static void main(String[] args) {
	Mapper<String,String,List<String>,Integer> m =
	    new Mapper<String,String,List<String>,Integer>() {
	    public List<Entry<List<String>,Integer>>
	    apply(Entry<String,String> entry) {
			List<Entry<List<String>,Integer>> result =
			new ArrayList<Entry<List<String>,Integer>>();
			
			String content = entry.getValue();
			
			    // break up the String into words
			String[] words = content.split("\\s");
			ArrayList<String> allWords = new ArrayList<String>();
			ArrayList<String> strListfiveWords = new ArrayList<String>();
			List<List<String>> fiveWordsAry = new ArrayList<List<String>>();
			int flag;
			for (String w : words) {
				if (w.length() > 0) {
					String[] newWords = w.split("[^a-z']");
					
					flag = 0;
					for (String str: newWords) {
						flag = 1;
					}
					if (flag == 1 && newWords[0].length() > 0) {
						allWords.add(newWords[0]);
					}
				}
			}
			int sizeOfWords = allWords.size();
			int offset = 0;
			for (int i = 0; i < sizeOfWords; i++) {
				if (allWords.size() >= 5) {
					strListfiveWords.add(allWords.get(i - offset));
					strListfiveWords.add(allWords.get(i+1 - offset));
					strListfiveWords.add(allWords.get(i+2 - offset));
					strListfiveWords.add(allWords.get(i+3 - offset));
					strListfiveWords.add(allWords.get(i+4 - offset));
					fiveWordsAry.add(new ArrayList<String>(strListfiveWords));
					allWords.remove(0);
					strListfiveWords.clear();
					offset += 1;
				}
			}
			
			int size = fiveWordsAry.size();
			for (List<String>strAry: fiveWordsAry) {
				result.add(new MREntry<List<String>,Integer>(strAry, 1));
			}

			return result;
	    };
	};

	    // sums the counts for each sequence
	Reducer<List<String>,Integer> r =
	    new Reducer<List<String>,Integer>() {
	    public Integer
	    apply(Entry<List<String>,List<Integer>> entry) {
			List<Integer> result = new ArrayList<Integer>();
			List<Integer> values = entry.getValue();
			int sum = 0;
			for (Integer i : values) {
			    sum += i;
			}
			/* return sum; */
         return;
	    }
	};

	Comparator<List<String>> c =
	    new Comparator<List<String>>() {
	    public int compare(List<String> sa1, List<String> sa2) {
		StringBuffer s1 = new StringBuffer();
		StringBuffer s2 = new StringBuffer();
		for (String s : sa1)
		    s1.append(s);
		for(String s0 : sa2)
		    s2.append(s0);
		return s1.toString().compareTo(s2.toString());
	    }
	};
	
	MiniMapReduce<String,String,List<String>,Integer> mr =
	    new MiniMapReduce<String,String,List<String>,Integer>(m,r,c);

	    // create a pair (filename, contents) for each file
	List<Entry<String,String>> entries =
	    new ArrayList<Entry<String,String>>();
	for(String s : args) {
	    entries.add(new MREntry<String,String>(s, FileUtil.readFile(s).toLowerCase()));
	}
	
       	Map<List<String>,Integer> result = mr.mapReduce(entries);
	FileUtil.writeFile("seqcount.out", result);
    }
}
