(*
 * fexpr.ml
 * Based on code by Chris Stone and Steve Freund
 *)

module Expr : EXPR = struct

  type expr = float * float -> float

  (* the mathematical constant pi *)
  let pi = 4. *. atan 1.

  (* Expression construction *)
  let buildX                           = (fun ((x:float), (y:float)) -> x)  
  let buildY                           = (fun ((x:float), (y:float)) -> y) 
  let buildSin e                       = (fun ((x:float), (y:float)) ->  
                                            (let k=(e(x, y)) in (sin (pi *. k))))
  let buildCos e                       = (fun (x, y) -> cos pi *. e (x, y))
  let buildAvg((e1:expr), (e2:expr))   = (fun ((x:float), (y:float)) ->  
                                            (let k1=(e1 (x, y)) in
                                            let k2=(e2 (x, y)) in 
                                               (k1 +. k2) /. 2.0))
  let buildTimes((e1:expr), (e2:expr)) = (fun ((x:float), (y:float)) ->  
                                            (let k1=(e1 (x, y)) in
                                            (let k2=(e2 (x, y)) in 
                                               (k1 *. k2))))

  (* exprToString : expr -> string *)
  let exprToString _ = "unknown"
    
  (* eval : expr -> float*float -> float *)
  let eval e (x,y) = e (x, y) 
	
  let sampleExpr =
          buildCos(buildSin(buildTimes(buildCos(buildAvg(buildCos(
     buildX),buildTimes(buildCos (buildCos (buildAvg
          (buildTimes (buildY,buildY),buildCos (buildX)))),
          buildCos (buildTimes (buildSin (buildCos
          (buildY)),buildAvg (buildSin (buildX), buildTimes
          (buildX,buildX))))))),buildY)))
 end
