(* Written By Daifu ye*)
(* Collaborate With Rhys Yu*)

(* This is a marker for places in the code that you have to fill in.
   Your completed assignment should never raise this exception. *)
exception ImplementMe

(* Problem 1 *)
(* Using List.filter to implement this function
 * example: allPos [0;-1;2] returns [2]*)
let allPos (l : int list) : int list =
   List.filter (function x -> x > 0) l  

(* Problem 2 *)  
(* exmpale: tails [1;2;3] returns [[1;2;3], [2;3], [3], []] *)
let tails (l : 'a list) : 'a list list = 
   List.fold_right (
      fun a returnB -> match returnB with
                  | [] -> let al = a::[] in al::returnB
                  | headL::restL -> let al = a::headL in al::returnB) l [[]]

(* Problem 3 *)
(* implement the filter with higher level function
 * example: filter (fun x -> x > 0) [1;0;-3] will
 * output [1]*)
let filter (f : 'a -> bool) (l : 'a list) : 'a list = 
   List.fold_right (fun itemInL returnL -> 
                        if f(itemInL) then
                           itemInL::returnL 
                        else
                           []) l []

(* Problem 4 *)
(* example: map2 (fun (x,y) -> x*y) [1;2;3] [4;5;6] will 
   output [1*4,2*5,3*6] *)
let rec map2 (f : 'a * 'b -> 'c) (l1 : 'a list) (l2 : 'b list) : 'c list =
   match (l1, l2) with
      | ([],[]) -> []
      | (_::_, []) -> []
      | ([], _::_) -> []
      | (itemA::restA, itemB::restB) -> (f(itemA, itemB))::(map2 f restA restB)
   

(* Problem 5 *)	
(* Use the map2 to zip two lists
   zip ([1;2], [3;4]) will return [(1,3); (2,4)] *)
let zip ((l1, l2) : 'a list * 'b list) : ('a * 'b) list =
   map2 (fun (itemA, itemB) -> (itemA, itemB)) l1 l2

(* Problem 6 *)
(* The last return value need to be changed from
 * bool to general*)
let curry (f : 'a * 'b -> 'c) : 'a -> 'b -> 'c =
   fun a -> fun b -> f(a, b) 

let uncurry (f : 'a -> 'b -> 'c) : 'a * 'b -> 'c =
   fun (a, b) -> f a b

(* Problem 7 *)      
(* Input type: int, return type: List *)
(* It will output the primes number between 2 to n *)
let primesUpTo n =
   (* compute a list of integers between 1 and n, inclusive *)
   let rec intsBetween i n = if i <= n then i::(intsBetween(i+1) n) else [] in
   (* compute a list of all elements of the given list that are prime *)
   let rec sieve cands = match cands with 
                           |[] -> []
                           |head::rest -> 
                                 head::sieve((List.filter
                                 (fun itemA -> itemA mod head != 0 )rest)) in
   sieve(intsBetween 2 n)
    
(* Problem 8 *)

(* The next two helper functions convert between a string and an
equivalent list of characters.  You do not need to modify them or
understand their implementations. *)
      
(* example: str2charList "hello" = ['h';'e';'l';'l';'o'] *)
let str2charList (s : string) : char list =
  let len = String.length s in
  let rec convert n =
    if n = len then [] else s.[n] :: (convert(n+1))
  in
    convert 0

(* example: charList2str ['h';'e';'l';'l';'o'] = "hello" *)
let charList2str (l : char list) : string =
  let s = String.create (List.length l) in
  let rec convert n lst =
    match lst with
	[] -> s
      | c::cs -> s.[n] <- c; (convert (n+1) cs)
  in
    convert 0 l

(* it make sure it will output all the letters, 
   insteads of non letter characters. *)
let roundAscii n = 
   if n > 122 then
      n - 26 
   else if n < 97 then
      n + 26 
   else
      n

(* example: encHelper 'a' = 'd' *)
let encrHelper (c, num) = Char.chr(roundAscii((Char.code(c) + num)))

(* (* example: decrHelper 'd' = 'a' *) *)
let decrHelper (c, num) = Char.chr(roundAscii((Char.code(c) - num)))

(* encryption helper: 
 * examples: cciHelper encrHelper 3 "lazy" will return
   "odcb"
   cciHelper decrHelper 3 "odcb" will retrun 
   "lazy"*)
let cciHelper f n str = charList2str(
                        List.map(fun c -> f(c, n))
                           (str2charList(str)))

let ccipher (n : int) : (string -> string) * (string -> string) =
   ((cciHelper encrHelper n), (cciHelper decrHelper n))
  
