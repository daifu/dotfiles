#!/usr/bin/python

"""
Output lines selected randomly from a file

Copyright 2005, 2007 Paul Eggert.
Copyright 2010 Darrell Benjamin Carbajal.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Please see <http://www.gnu.org/licenses/> for a copy of the license.

$Id: randline.py,v 1.4 2010/04/05 20:04:43 eggert Exp $

Description of the program:
This program takes three files or standard input as arguments and 
output random line(s) from their text. The options that you have 
here are the number of lines and with or without replacement when 
display the output.
"""

import random, sys
from optparse import OptionParser

class mList(list):
   """This is a class inherited from list class"""
   def merge(self, otherList):
      """merge two simple list, such as \
         ["a"].merge["b"] => ["a", "b"]"""
      for member in otherList:
         self.append(member)

class randline:
   def __init__(self, data):
      """If the data is a string, it treats it as a standard input and 
         parse them into list of strings, which are separted by newline,
         and if it is a list, open those files and save them in lines."""
      if isinstance(data, str):
         temp = data.splitlines()
         self.lines = map(self.addNewLine, temp)
      elif isinstance(data, list):
         self.lines = mList() 
         for filename in data: 
            f = open(filename, 'r')
            temp = f.readlines()
            sizeOfTemp = len(temp)
            if sizeOfTemp > 0 and temp[-1] != '\n':
               temp += '\n'
            self.lines.merge(temp)
            f.close()
   def addNewLine(self, x):
      """Append newline character to the x"""
      return x+'\n'
   def chooseline(self):
      try:
         return random.choice(self.lines)
      except:
         sys.stderr.write("Error: something wrong with your files, check them\
                           and make sure they are not all empty.\n")
         sys.exit()

   def chooseNoReplacementLine(self, k):
      """Choose random line(s) from the lines, and it \
         output no replacement line(s)"""
      try:
         return random.sample(self.lines, int(k)) 
      except:
         sys.stderr.write("Error: The range of lines required is larger than \
                           the existing files.\n")
         sys.exit()

def main():
   version_msg = "%prog 2.0"
   usage_msg = """%prog [OPTION]... FILE

Output randomly selected lines from three FILE."""

   parser = OptionParser(version=version_msg,
                         usage=usage_msg)
   parser.add_option("-n", "--numlines",
         action="store", dest="numlines", default=1,
         help="output NUMLINES lines (default 1)")
   parser.add_option("-w", "--without-replacement",
         action="store_true", dest="noReplacement", default=False,
         help="output lines without replacement")
   options, args = parser.parse_args(sys.argv[1:])

   try:
      numlines = int(options.numlines)
   except:
      parser.error("invalid NUMLINES: {0}".
                  format(options.numlines))
   try:
      noReplacement = bool(options.noReplacement)
   except:
      parser.error("invalid option: -w")

   if numlines < 0:
      parser.error("negative count: {0}".
                     format(numlines))
   numArgs = len(args)
   if numArgs == 3:
      in_data = [args[0], args[1], args[2]]
   elif numArgs == 1:
      in_data = args[0]
   else:
      parser.error("wrong number of operands")
   
   try:
      generator = randline(in_data)
      lines = []
      if noReplacement:
         lines = generator.chooseNoReplacementLine(str(numlines))
         for line in lines:
            sys.stdout.write(line)
      else:
         for index in range(numlines):
            sys.stdout.write(generator.chooseline())
   except IOError as (errno, strerror):
      parser.error("I/O error({0}): {1}".
            format(errno, strerror))

if __name__ == "__main__":
   main()
   
   try:
      generator = randline(in_data)
      lines = []
      if noReplacement:
         lines = generator.chooseNoReplacementLine(str(numlines))
         for line in lines:
            sys.stdout.write(line)
  
