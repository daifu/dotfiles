
duplist(L,R) :- dlHelper(L,R).
dlHelper([],[]).
dlHelper([H|T1],[H|[H|T2]]) :- dlHelper(T1,T2).

sorted([]).
sorted([_]).
sorted([H1, H2|T]) :-
   H1 =< H2,
   sorted([H2|T]).
  

/*member(X,[X|_]).
member(X,[_|R]) :- 
   member(X,R).*/

/*If x is not in the Y*/
getSubList(X, [A|Y], Z) :-
   getSubList(X, Y, Z).
/*If x is in the Y*/
getSubList(X, [X|Y], Y).

subseq([], _).
subseq([H|T], Y) :-
   member(H, Y),
   getSubList(H, Y, Y1),
   subseq(T, Y1).



% Solve Sudoku
initialize([R1, R2, R3, R4], [R1, R2, R3, R4]).

sudoku([R1, R2, R3, R4], S) :-
   D = [1,2,3,4],
   S = [[X11,X12,X13,X14],[X21,X22,X23,X24],[X31,X32,X33,X34],[X41,X42,X43,X44]],
   initialize(R1, [X11,X12,X13,X14]),
   initialize(R2, [X21,X22,X23,X24]),
   initialize(R3, [X31,X32,X33,X34]),
   initialize(R4, [X41,X42,X43,X44]),
   permutation(R1, D), permutation(R2, D), permutation(R3, D), permutation(R4, D),
   permutation([X11, X21, X31, X41], D),
   permutation([X12, X22, X32, X42], D),
   permutation([X13, X23, X33, X43], D),
   permutation([X14, X24, X34, X44], D),
   permutation([X11, X12, X21, X22], D),
   permutation([X13, X14, X23, X24], D),
   permutation([X31, X32, X41, X42], D),
   permutation([X33, X34, X43, X44], D).
   


% move(Start, Move, NewState)
% Move would be to(peg1, peg2)...
move([[H|T], P2, P3], to(peg1, peg2), [T, [H|P2], P3]).
move([[H|T], P2, P3], to(peg1, peg3), [T, P2, [H|P3]]).
move([P1, [H|T], P3], to(peg2, peg1), [[H|P1], T, P3]).
move([P1, [H|T], P3], to(peg2, peg3), [P1, T, [H|P3]]).
move([P1, P2, [H|T]], to(peg3, peg1), [[H|P1], P2, T]).
move([P1, P2, [H|T]], to(peg3, peg2), [P1, [H|P2], T]).

badState([[H1, H2|T1], P2, P3]) :- H2 < H1.
badState([P1, [H1, H2|T2], P3]) :- H2 < H1.
badState([P1, P2, [H1, H2|T3]]) :- H2 < H1.

towersOfHanoi(Goal, Goal, []).

towersOfHanoi(Start, Goal, [Move|Actions]):-
   move(Start, Move, NewState),
   \+(badState(NewState)),
   towersOfHanoi(NewState, Goal, Actions).

% Lenght is predicate.
% length([], 0).
% length([Move|Actions], N) :- length(Actions, Nsub), N is Nsub + 1.





