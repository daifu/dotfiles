#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int SIZE;
/* I need to loop through the string 
 * If the actual size of the file is 
 * less than the line of the N, stop;
 * If the actual size of the file is
 * equal to the line of the N, continue!*/
int read(int count, char *buf, int size);

int compare(const void *a, const void *b);

void print(char **sortedArray, int size);

void checkError(int argc, int N);

int main(int argc, char *argv[]) 
{
   int N = strtoul(argv[1], NULL, 10),
       actual_size = 0, i,
       check = N, new_size = N, counter = 0;
   char *buf  = (char *)malloc(N + 1);
   char **records = NULL;
   char **dump, *buf_r, **temp;
   
   SIZE = N;
   
   checkError(argc, N);

   while((check = read(check, buf, N)) == N)
   {
      actual_size++;
      records = (char **)realloc(records, actual_size * sizeof(char *)); 
      buf_r = (char *) malloc(N);
      memcpy(buf_r, buf, N);
      records[counter] = buf_r;
      counter++;
   }
   
   qsort(records, actual_size, sizeof(char *), compare);
   
   print(records, actual_size);
   
   for(i = 0; i < actual_size; i++)
   {
      free(records[i]);
   }
   free(records);

   free(buf);
   return 0;
}

void print(char **sortedArray, int size)
{
   int i, next, j = 0;

   if(size > 0)
      while(j < SIZE)
      {
         printf("%c", sortedArray[0][j]);
         j++;
      }
   else {
      fputs("Error: No data for the stadard input.", stderr);
      exit(1);
   }
   printf(", ");

   for(i = 0;  i < size; i++)
   {
      next = i + 1;
      if(next < size && memcmp(sortedArray[i], sortedArray[next], SIZE) != 0)
      {
         j = 0;
         while(j < SIZE)
         {
            printf("%c", sortedArray[next][j]);
            j++;
         }
         printf(", ");
      }
   }
}

int read(int count, char *buf, int size)
{
   int counter = 0, c, i;

   if(size == count)
      do
      {
         c = getc(stdin);
         if (c != EOF)
         {
            buf[counter] = (char)c;
            counter++;
         }
      }while(counter < size && c != EOF);
   
   while(counter > 0 && counter < size)
   {
      buf[counter] = '\0';
      counter++;
   }
   return counter;
}

int compare(const void *a, const void *b)
{
   return memcmp(*(char**)a, *(char**)b, SIZE);
}

void checkError(int argc, int N)
{
   if(argc != 2)
   {
      fputs("Error: giving wrong parameters for the function", stderr);
      exit(1);
   } else if(N < 0)
   {
      fputs("Error: N should be positive or N is too large", stderr);
      exit(1);
   }
}
