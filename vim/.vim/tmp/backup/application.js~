
/*jslint white: false, onevar: true, browser: true, devel: true, undef: true, nomen: true, eqeqeq: true, plusplus: true, bitwise: true, regexp: true, strict: false, newcap: true, immed: true */
/*global jQuery, $, window */

var CountdownTimer = {
  endTime:null,
  timerId:null,
  minutes:0,
  maxWidth:0,
  maxTime:(25 * 60 * 1000),
  isBreak:false,

  normalColors:["#e47a80", "#eb363b"],
  breakColors: ["#97c751", "#759f58"],

  start: function(minutes, isBreak) {
    if (this.maxWidth === 0) {
      this.maxWidth = $('#timer-bar').width();
    }

    if (this.timerId) {
      this.cancel();
    }

    this.minutes = minutes;
    this.isBreak = isBreak;

    this.setupTimer();
    this.flashBar();
    this.notifyServer();
  },

  setupTimer:function() {
    $('#timer-finished').fadeOut();

    var date     = new Date();
    this.endTime = date.getTime() + (this.minutes * 60 * 1000);
    // this.endTime = date.getTime() + (this.minutes * 1000);
    this.timerId = setInterval(this.tick, 1000);

    this.setBarToTime(this.minutes * 60 * 1000);
    $('title').text("Started " +
                    (this.isBreak ?
                     this.minutes + " minute break." :
                     "pomodoro."));
  },

  flashBar:function() {
    var lightColor, darkColor;
    if (this.isBreak)
    {
      lightColor = this.breakColors[0];
      darkColor  = this.breakColors[1];
    } else {
      lightColor = this.normalColors[0];
      darkColor  = this.normalColors[1];
    }
    $('#timer-bar').animate({backgroundColor:lightColor}).animate({backgroundColor:darkColor});
  },

  notifyServer: function () {
    $.ajax({
      type: "POST",
      url: "/timers.json",
      dataType: "json",
      contentType: "application/json",
      data: JSON.stringify(CountdownTimer),
      success: function(data, textStatus) {
        // alert(data);
      }
    });
  },

  setBarToTime:function(time) {
    $('#timer-bar').animate({width:(time/this.maxTime) * this.maxWidth});
  },

  cancel:function() {
    clearInterval(this.timerId);
  },

  tick:function() {
    // NOTE: Called externally, so must use "CountdownTimer" instead of "this".
    CountdownTimer.tock();
  },

  tock:function() {
    var date = new Date(),
      remainingTime = this.endTime - date.getTime();
    if (remainingTime <= 0) {
      this.cancel();
      this.setBarToTime(0);
      this.showCompletedInLog();
      this.showCompletedMessage();
    } else {
      this.setBarToTime(remainingTime);
    }
  },

  showCompletedInLog:function() {
    var logClass = "timer-log-" + this.minutes + (this.isBreak ? "-break" : "");
    $('#timer-log').append('<div class="' + logClass + '"></div>');
  },

  showCompletedMessage:function() {
    if ($('#timer-finished').length === 0) {
      $('#timer').append('<div id="timer-finished"></div>');
    }
    var message = "Finished " + (this.isBreak ?
                                 this.minutes + " minute break." :
                                 "one pomodoro.");
    $('title').text(message);
    $('#timer-finished').text(message).fadeIn(1000);
  }
};

  var taskStates = ['task-empty', 'task-x', 'task-apostrophe', 'task-dash'];

  jQuery.fn.extend({

    resetTaskStateClassNames: function () {
      var elements = jQuery(this);
      jQuery.each(taskStates, function () {
        elements.removeClass(this);
      });
      return this;
    },

    resetTaskState: function () {
      return this.each(function () {
        jQuery(this).data('taskStateIndex', 0).addClass(taskStates[0]);
      });
    },

    toggleTaskState: function () {
      jQuery(this).resetTaskStateClassNames();

      return this.each(function () {
        var element = jQuery(this),
          taskStateIndex = element.data('taskStateIndex') || 0;
        taskStateIndex = (taskStateIndex + 1) % taskStates.length;

        element.data('taskStateIndex', taskStateIndex).addClass(taskStates[taskStateIndex]);
      });
    }
  });

  var app = {

    setupTimerButtons: function () {
      $('#button-25').click(function (e) {
        e.preventDefault();
        CountdownTimer.start(25);
      });

      $('#button-5-break').click(function (e) {
        e.preventDefault();
        CountdownTimer.start(5, true);
      });

      $('#button-25-break').click(function (e) {
        e.preventDefault();
        CountdownTimer.start(25, true);
      });
    },

    setupTaskForms: function () {
      // Make task list sortable
      $('#tasks ul').sortable({handle:".handle"}).disableSelection();

      // Wire up the add task button
      $('#add').click(function (e) {
        e.preventDefault();
        var taskItem = $('#tasks ul li:first').clone();
        taskItem.find('form')[0].reset();
        taskItem.find('.completion a').resetTaskState();
        $('#tasks ul').append(taskItem);
        taskItem.find("input[type='text']:first").focus();
      });

      $('.completion a').live("click", function (e) {
        e.preventDefault();
        $(this).toggleTaskState();
      });
    },

    loadReport: function () {
      $("#report").load("/report.html", null,
                        function (responseText, status, response) {
                          //alert(JSON.stringify(response));
                        });
    },

    setupAjaxCallbacks: function () {
      $('body').ajaxStart(function () {
        $('#ajax-status').show().text("Loading...");
      });
      $('body').ajaxStop(function () {
        $('#ajax-status').fadeOut();
      });
      $('body').ajaxError(function (event, xhr, ajaxOptions, thrownError) {
        if (xhr.status === 401) {
          if ($("#login").is(":hidden")) {
            app.showLoginForm();
          }
          alert("Sorry, " + xhr.responseText.toLowerCase());
          // Focus cursor on field after showing alert.
          $("#login").find("input[type='text']:first").focus();
        }
        // console.log("XHR Response: " + JSON.stringify(xhr));
        // console.log("XHR Response: " + xhr);
        // dumpProps(xhr);
      });
    },

    showLoginForm: function () {
      $(window).resize(app.centerLoginForm);
      app.centerLoginForm();

      var $form = $("#login");
      $form.show("slide", {direction: "up"});
      $form.submit(function (e) {
        e.preventDefault();
        $.post($form.attr('action'), $form.serialize(), function () {
          $form.hide("slide", {direction: "up"});
        });
      });
    },

    centerLoginForm: function () {
      $("#login").css({
        left: $(window).width()/2 - $("#login").width()/2
      });
    },

    createSearchTweetsForm: function () {
      // Create a div for searching tweets if it doesn't exist.
      if ($('body').is(':not(:has(#searchTweets))')) {
        $('<div/>', { id: "searchTweets" }).appendTo("body");
      }

      $('<form/>', {
         'id': 'searchForm',
         'action': '/searchTweets',
         'method': 'post'
      }).append($('<input/>', {
         'class': 'searchInput',
         'type': 'text',
         'name': 'search'
      })).append($('<input/>', {
         'class': 'searchButton',
         'type': 'submit',
         'value': 'Search'
      })).append($('<div/>', {
         'class': 'divider'
      })).appendTo('#searchTweets');
      
      var $form = $("#searchForm");
      $form.submit(function (e){
         e.preventDefault();
         $.post($form.attr('action'), $form.serialize(), function(data) {
            // console.log(data);
            // dumpProps(data);
            app.getTweets(data.search);
         }, "json");
      });
    },

    getTweets: function (query) {
      // Using 'jsonp' as the last argument appends a callback to the URL.
      // See also: 
      //   http://apiwiki.twitter.com/Twitter-Search-API-Method%3A-search
      //   http://search.twitter.com/operators
      if(query == null) {
         query = 'googleio';
      }
      $.get("http://search.twitter.com/search.json?q=" + query,
            app.showTweets,
            'jsonp');
    },

    showTweets: function (data, textStatus, xhr) {
      // Create a div for the tweets if it doesn't exist.
      if ($('body').is(':not(:has(#tweets))')) {
        $('<div/>', { id: "tweets" }).appendTo("body");
      }
      // Create a div for each tweet with image, from_user, and text.
      $(data.results).each(function () {
        $('<div/>', {
          'class': 'tweet'
        }).append($('<img/>', {
          'src': this.profile_image_url
        })).append($('<div/>', {
          'class': 'from_user',
          'text': this.from_user
        })).append($('<div/>', {
          'class': 'text',
          'html': this.text
        })).appendTo("#tweets");
      });
    }

  };

  jQuery(function () {

    app.setupAjaxCallbacks();

    app.setupTimerButtons();
    app.setupTaskForms();

    // Create two extra task fields
    $('#add').click().click();

    // Aesthetic bottom div under tasks
    $('#task-footer').bg([0,0,10,10]);

    // Focus on the first text field
    $("input[type='text']:first").focus();

    app.loadReport();

    app.showLoginForm();

    app.createSearchTweetsForm();

    app.getTweets();

  });
 
function dumpProps(obj, parent) {
   // Go through all the properties of the passed-in object 
   for (var i in obj) {
      // if a parent (2nd parameter) was passed in, then use that to 
      // build the message. Message includes i (the object's property name) 
      // then the object's property value on a new line 
      if (parent) { var msg = parent + "." + i + "\n" + obj[i]; } else { var msg = i + "\n" + obj[i]; }
      // Display the message. If the user clicks "OK", then continue. If they 
      // click "CANCEL" then quit this level of recursion 
      if (!confirm(msg)) { return; }
      // If this property (i) is an object, then recursively process the object 
      if (typeof obj[i] == "object") { 
         if (parent) { dumpProps(obj[i], parent + "." + i); } else { dumpProps(obj[i], i); }
      }
   }
}
