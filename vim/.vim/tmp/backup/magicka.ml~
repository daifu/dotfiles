open Str;;

exception Continue;;

let iteri f lst =
   let i = ref 0 in
   List.iter (fun a -> f a !i ; incr i) lst;;

let rec print que out_chan =
   match que with 
      t -> read_line (Queue.pop t)
   (* if (Queue.is_empty que) = false then  *)
   (*    (output_string out_chan (read_line (Queue.pop que))) *)
   (*    (* output_string out_chan " "; *) *)
   (*    (* output_string out_chan (print que out_chan)) *) *)
   (* else *)
   (*    output_string out_chan ";" *)
      

let main () = 
   try
      let file_name = Sys.argv.(1) in
      let in_chan = open_in file_name in
      let out_chan = open_out (file_name^"out") in
      
      let n_lines = int_of_string (input_line in_chan) in
      
      let case = ref 1 in
      
      for i = 1 to n_lines do
         try
         (
            let arr = (Str.split (regexp " ") (input_line in_chan)) in
            output_string out_chan ("Case #"^(string_of_int !case)^": ["); 
            let que = Queue.create  in
            List.iter (fun ele -> Queue.push (ele:string) que()) arr;
            (* let newArr = Array.of_list arr in *)
            (* let str = Array.get ((Array.length newArr) - 1) in *)
            (* let size = Array.get ((Array.length newArr) - 2) in *)
            (*  *)
            (* let numC = string_of_in (Array.get newArr 0) in *)
            (* if numC > 0 then *)
            (*    let pairC = Array.get newArr 1 in *)
            (*    let numD = Array.get newArr 2 in *)
            (*     *)
            (* else *)
            (*    let numD = string_of_in (Array.get newArr 1) in *)
            (*       if numD > 0 then *)
            (*          let pairD = Array.get newArr 2 in *)
            (*       else *)
            (*          let size = string_of_in (Array.get newArr 2) in *)
            (*          let str = Array.get newArr 3 in  *)
            (*           *)
            (* output_string out_chan (Array.get newArr 0); *)
            print que out_chan;
            output_string out_chan "\n";
            case := !case + 1
         )
         with _->();
      done
   with _-> failwith "file name required";;

main ();;
