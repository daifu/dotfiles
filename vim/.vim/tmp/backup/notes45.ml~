(* Can pass functions to other functions
 * a function that takes another function as an arg is called
 * a higher-order function*)

let twice (f, x) = f(f x)

let betterTwice f = 
   (function x -> f(f x))

(* This style of passing multiple args via functions that 
 * return functions is called - curring *)

let toThe4thPower = betterTwice( function x -> x * x)

let betterTwice3 = 
   (fun f x -> f(f x))

(* in general:  *)
(* This is more common style in writing Ocaml programming *)
let betterTwice4 f x = f(f x)
(* The natual way in Ocaml is writing the curry, and it allow
 * user to pass one arg or two.*)

(* Static scoping: even though you define a local variable
 * but the name of the function is defined before , and it 
 * will know that local variable is referred to the function
 * defined before with the same name.*)

let betterTwice2 = 
   (function f ->
      (function x -> f(f x)))
(* the function name f is a local variable at the line 31,
 * but it is defined at the line 30, and base on dynameic
 * scoping, it is defined at the line 30, so it refers to 
 * the function at line 30*)

let rec incLst l = 
   match l with
      [] -> []
      | x::xs -> (x+1)::(incLst xs)

let rec swaplst l =
   match l with
      [] -> []
      | (x, y)::rest -> (y, x)::(swaplst rest)

let rec map f l =
   match l with
      [] -> []
      | x::xs -> (f x)::(map f xs)

(* (a' -> bool) -> 'a llist -> a' list = <fun> :
   * what it does: the second list is return when
   * the function return true from the first list
   * , which is on the left side.*)

(* List.fold_right f [x1;...xn] b 
 * computes this expression:
 * f(x1, f(x2, .. f(xn, b) ..))*)

let rec sumList l =
   match l with 
      [] -> 0
      | x::xs -> x + (sumList xs)

let rec fold_right f lst baseval = 
   match lst with
      [] -> baseval
      | x:;xs -> f x (fold_right f xs baseval)

let concat l1 l2 =
   List.fold_right (fun x l -> x::l) l1 l2;;

let dupList l =
   List.fold_right (fun x rest -> x::x::rest) l []

