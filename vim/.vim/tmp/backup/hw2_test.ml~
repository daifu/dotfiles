open OUnit

let test_allPos () =
   assert_equal [1] (Hw2.allPos [1;0;-2]);
   assert_equal []  (Hw2.allPos [0;-3;-9])
;;

let test_tails () = 
   assert_equal [[1;2];[2];[]] (Hw2.tails [1;2]);
   assert_equal [["h";"e";"y"];
                  ["e";"y"];
                  ["y"];
                  []] (Hw2.tails ["h";"e";"y"]);
   assert_equal [[(2,3);(4,5)];
                  [(4,5)];
                  []] (Hw2.tails [(2,3);(4,5)])
;;

let test_map2 () = 
   assert_equal [4;10;18] (Hw2.map2 (function (x,y) -> x*y) [1;2;3] [4;5;6]);
   assert_equal [["a";"b"];["c";"d"]] (Hw2.map2 (fun (x,y) -> x::y::[]) ["a";"c"] ["b";"d"])
;;

let test_zip () = 
   assert_equal [(1,3);(2,4)] (Hw2.zip ([1;2], [3;4]))
;;

let suite = 
   "suite">:::
   ["test_allPos">:: test_allPos;
   "test_tails">::test_tails;
   "test_map2">::test_map2;
   "test_zip">::test_zip]
;;

let _ = 
   run_test_tt_main suite
;;
