<h1>Demo code for "Extreme JavaScript Performance" @ JSConf.eu</h1>

<script>
var benchmark = function(m,i){ 
  var d1 = new Date, d2, r;
  while(i--) r = m();
  d2 = new Date;
  console.log(d2.getTime()-d1.getTime()); 
  // if(r) console.log(r);
}
//First line is from chrome
//Second line is from Firefox
//Third line is Safari

// [51 vs 104] or [99 vs 71] different browsers has different performance, expand your loop might help
// 229 vs 76
// 25 vs 20
benchmark(function(){
   var i = 60, j = 0;
   while(i--) j++;
   return j;
}, 100000);

benchmark(function(){
   var j = 0;
   j++;j++;j++;j++;j++;j++;j++;j++;j++;j++;
   j++;j++;j++;j++;j++;j++;j++;j++;j++;j++;
   j++;j++;j++;j++;j++;j++;j++;j++;j++;j++;
   j++;j++;j++;j++;j++;j++;j++;j++;j++;j++;
   j++;j++;j++;j++;j++;j++;j++;j++;j++;j++;
   j++;j++;j++;j++;j++;j++;j++;j++;j++;j++;
   return j;
}, 100000);


// 29 vs 3 Function calls are very experence
// 123 vs 41
// 53 vs 1
var x = 4, y = 8;

benchmark(function(){
   var add = function (x, y) {
      return x + y;
   }
   return add(x, y);
}, 100000);

benchmark(function(){
   return x + y;
}, 100000);

//367 vs 269 different browser has different performance
//642 vs 464
//198 vs 76
var str = "12.5";

benchmark(function(){
 ~~(1 * str);
}, 1000000);

benchmark(function(){
 parseInt(str);
}, 1000000);

//30 vs 27 for and while loop do the same performance
//403 vs 387
//218 vs 200
benchmark(function(){
 var test = '';
 for (var i = 0;i<10000;i++)
   test = test + str;
}, 100);

benchmark(function(){
 var test = '', i = 10000;
 while(i--) test = test + str;
}, 100);

//154 vs 279 Cashed your variable inside the loop
//878 vs 891
//86 vs 87
benchmark(function(){
 var w = window, i = 10000;
 while(i--) w.test = 'test';
}, 100);

benchmark(function(){
 var i = 10000;
 while(i--) window.test = 'test';
}, 100);

//23 vs 19 Put true statement first
//431 vs 397
//17 vs 18
var b = true, n = 99;

benchmark(function(){
 return n*n || b;
}, 1000000);

benchmark(function(){
 return b || n*n;
}, 1000000);

//99 vs 4 with statement is harmful
//98 vs 34
//32 vs 20
benchmark(function(){
 var obj = { prop: 'test', str: '' };
 with(obj){ 
   var i = 10000;
   while(i--) str += prop;
   return str;
 }
}, 10);

benchmark(function(){
 var obj = { prop: 'test', str: '' }, i = 10000;
 while(i--) obj.str += obj.prop;
 return obj.str;
}, 10);

// 66 vs 19 Avoid using the try catch 
// 450 vs 437
// 347 vs 15
var a = 0;

benchmark(function(){
  try{
    a += 1;
  } catch(e) {}
}, 1000000);

benchmark(function(){
  a += 1;
}, 1000000);

(function(){ return 2 * 3; }).toString();

</script>
