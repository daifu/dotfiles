#include <stdio.h>
#include <string.h>
#include <omp.h>

const int size = 1000;

int min(int a, int b) {return a < b ? a : b;} 

void show(int src[][size], int size) {
   int i, j, k;
#pragma omp parallel
   {
      #pragma omp for private(j, k)
      for(j = 0; j < size; j++) {
         for(k = 0; k < size; k++) {
            printf("%d ", src[j][k]);
         }
         printf("\n");
      }
   }
      printf("\n");
}

void transpose(int dst[][size], int src[][size], int dim)
{
   int i, j;
   int k;
   int blocksize = 3; //It will be passed by the call
   
   //Use the blocked matrix to reduce the step into
   //the cache block, so dst[i][j] adn dst[j][i] has
   //the same hit rate.
   for (k = 0; k < dim; k+= blocksize)
      for (i = 0; i < min(k+blocksize, dim); i++) {
         for(j = i; j < min(k+blocksize, dim); j++) {
            //Because the upper triangle is similar to
            //the lower triangle, use the same way to
            //update the dst and same half traversal.
            dst[j][i] = src[i][j];
            dst[i][j] = src[j][i];
         }
      }
}

int main() {
   int src[size][size];
   int dst[size][size]; 
   int i, j, k;
   
   /* for(i = 0; i < size; i++) */
   memset(src, 255, sizeof(src));
   memset(dst, 255, sizeof(src));
  
#pragma omp parallel
   {
      #pragma omp for private(j, k)
      for(j = 0; j < size; j++) {
         for(k = 0; k < size; k++) {
            src[j][k] = k; 
         }
            /* printf("%d ", src[j * size + k]); */
      }
   }
   printf("Before Transpose: \n");
   show(src, size);
/*
 * Before Transpose: 
 * 0 1 2 3 4 5 6 7 8 9 
 * 0 1 2 3 4 5 6 7 8 9 
 * 0 1 2 3 4 5 6 7 8 9 
 * 0 1 2 3 4 5 6 7 8 9 
 * 0 1 2 3 4 5 6 7 8 9 
 * 0 1 2 3 4 5 6 7 8 9 
 * 0 1 2 3 4 5 6 7 8 9 
 * 0 1 2 3 4 5 6 7 8 9 
 * 0 1 2 3 4 5 6 7 8 9 
 * 0 1 2 3 4 5 6 7 8 9 
 * */
   transpose(dst, src, size);
   printf("After Transpose: \n");
   show(dst, size);
/*fter Transpose: 
 * 0 0 0 0 0 0 0 0 0 0 
 * 1 1 1 1 1 1 1 1 1 1 
 * 2 2 2 2 2 2 2 2 2 2 
 * 3 3 3 3 3 3 3 3 3 3 
 * 4 4 4 4 4 4 4 4 4 4 
 * 5 5 5 5 5 5 5 5 5 5 
 * 6 6 6 6 6 6 6 6 6 6 
 * 7 7 7 7 7 7 7 7 7 7 
 * 8 8 8 8 8 8 8 8 8 8 
 * 9 9 9 9 9 9 9 9 9 9 
 * */
   
}
