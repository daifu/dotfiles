
(* Homework 1 *)

(* Problem 1 *)
let rec fib (n:int) : int =
(* Calculate the fibonacci number *)
   match n with
      | 0 -> 0
      | 1 -> 1
      | n -> fib(n -1) + fib(n - 2)

(* Problem 2 *)
(* let rec clone ((e, n) : 'a * int) : 'a list = [] *)
(* Example: clone("hi", 4) will be ["hi", "hi", "hi", "hi"] *)
let rec clone ((e, n) : 'a * int) : 'a list =
   match (e, n) with
      | (e, 0) -> [] 
      | (e, 1) -> e :: []
      | (e , n)-> e :: clone(e, n-1)

(* Problem 3 *)
(* Example: allPos [1;-1;2;3;4;-5] will be [1;3;4] *)
let rec allPos (l:int list) : int list = 
(* Filter out all the non-positive numbers *)
   match l with
      | [] -> []
      | x::xs -> if x > 0 then x :: allPos(xs) else allPos(xs)

(* Problem 4 *)
(* Example: everyOther [1;-2;3;4;-5] will be [1;3;-5]
 * everyOther [] will be []*)
let rec everyOther (l:'a list) : 'a list =
   match l with
      | [] -> []
      | x::[] -> x :: everyOther([])
      | x::y::xs -> x :: everyOther(xs)
  
(* Problem 5 *)
(* Example: tails [1;2;3] will be [[1;2;3];[2;3];[3];[]] *)
let rec tails (l : 'a list) : 'a list list =
   match l with
   | [] -> [[]]
   | x::xs -> if x::xs = l then
                 l::tails(xs)
              else 
                 xs::tails(xs)

(* Problem 6 *)  
(* helper function: concat the list l2 to l1 *)
let rec concat (l1, l2) =
  match l1 with
      [] -> l2
    | x::xs ->  x :: concat(xs, l2)

(* Example: reverse [1;2;3] will be [3;2;1] *)
let rec reverse (l : 'a list) : 'a list =
   match l with
      | [] -> []
      | x::xs -> concat(reverse(xs), [x])

(* Problem 7 *)
let fastRev (l : 'a list) : 'a list =
(* Fast reversing a list with helper to transform the recusive function 
 * to compute the result as they reuse down.*)
  let rec revHelper(suffixToReverse, reversedPrefix) =
      match suffixToReverse with
         | [] -> reversedPrefix 
         | x::xs -> revHelper(xs, x::reversedPrefix)
  in
    revHelper(l, [])
  
(* Problem 8 *)  
(* Example: Opn(Opn(Num 1.0, Add, Num 2.0), Mult, Num 3.0) will be 9.0 *)
type opn = Add | Sub | Mult | Divide
type aexp = Num of float | Opn of aexp * opn * aexp

let rec evalAExp (e:aexp) : float =
(* Evaluate the mathmatcal expression in the aexp object. *)
   match e with 
      | Num f -> f 
      | Opn(f1, o, f2) -> match o  with
                             | Add -> evalAExp(f1) +. evalAExp(f2)
                             | Sub -> evalAExp(f1) -. evalAExp(f2)
                             | Mult -> evalAExp(f1) *. evalAExp(f2)
                             | Divide -> evalAExp(f1) /. evalAExp(f2)


(* Problem 9 *)  
(* Example: input ([Push 1.0; Push 2.0; DoOpn Add; Push 3.0; DoOpn Mult], []) 
   Output: 9.*)
type sopn = Push of float | DoOpn of opn

let rec evalRPN (args : (sopn list * float list)) : float = 
(* Evaluate the mathmatic problem base on the system stack *)
   match args with
      | ([], []) -> 0.0
      (* Return the answer when the stack is empty *)
      | ([], x::fl) -> x
      | (Push x::stl, []) -> evalRPN(stl, x::[])
      | (DoOpn o::stl, []) -> evalRPN(stl, [])
      | (Push x::stl, h::[]) -> evalRPN(stl, x::h::[])
      | (DoOpn o::stl, h::[]) -> evalRPN(stl, h::[])
      | (sp::stl, h::m::fl) -> match sp with
                           | Push x -> evalRPN(stl, x::h::m::fl)
                           | DoOpn o -> match o with
                                          | Add -> evalRPN(stl, (m +. h)::fl) 
                                          | Sub -> evalRPN(stl, (m -. h)::fl) 
                                          | Mult -> evalRPN(stl, (m *. h)::fl) 
                                          | Divide -> evalRPN(stl, (m /. h)::fl) 

(* Problem 10 *)  
(* Example: toRPN(Opn(Opn(Opn(Opn(Num 1.0, Add, Num 2.0), Mult, Num 3.0), Mult, Num 3.0),
                  Add, Opn(Opn(Num 4.0, Sub, Num 1.0), Mult, Num 2.0)))
  will be [Push 1.0; Push 2.0; DoOpn Add; Push 3.0; DoOpn Mult;
           Push 4.0; Push 1.0; DoOpn Sub; Push 2.0; DoOpn Mult;
           DoOpn Add] *)
let rec toRPN (e:aexp) : sopn list =
(* Convert the mathmatical expression into a system stack *)
   match e with
      | Num f -> [Push f]
      | Opn(f11, o, f12) -> match (f11, f12) with
                              | (Num f21, Num f22) -> Push f21::Push f22::DoOpn o::[]
                              | (Num f21, f22) -> Push f21::toRPN(f22)
                              (* Use concat function defined before, and concat
                               * sopn list together base on the post-order tree
                               * traversal algorigthm.*)
                              | (f21, f22) -> concat(concat(toRPN(f21), toRPN(f22)), [DoOpn o])

	  
