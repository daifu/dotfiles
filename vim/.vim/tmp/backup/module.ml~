(* module type LINK = sig end  *)

module LinkedList = struct
   type linkedList = Null | Node of int * linkedList
   
   exception EmptyList
   
   let create () = Null

   let head ll = match ll with
                  Null -> raise EmptyList
                  |Node (ele, _) -> ele

   let rec push ll v = match ll with
                     Null -> Node(v, Null)
                     |Node (ele, subll) -> Node (ele, (push subll v))

   let rec length ll = 
      let rec count ll sum = 
         match ll with
            Null -> sum 
           |Node(ele, subll) -> count subll (sum + 1)
      in
      count ll 0
  
   let rec display ll = 
      match ll with
         Null -> []
        |Node(ele, subll) -> ele::(display subll)
   
   (* It does not work because it will change the order of 
    * the list inside the prefix.*)
   (* let rec insert prefix subffix =  *)
   (*    match prefix with *)
   (*       Null -> subffix  *)
   (*      |Node(ele, subll) -> Node(ele, (insert subll subffix))  *)

   (* let rec remove ll v = *)
   (*    let rec helper ll v prefix =  *)
   (*       match ll with *)
   (*          Null -> raise EmptyList *)
   (*         |Node(ele, subll) -> (if (ele = v) then (insert prefix subll)  *)
   (*                             else (helper subll v (Node(ele, prefix))))  *)
   (*    in *)
   (*       (helper ll v Null) *)

let rec remove ll v = 
      match ll with
         Null -> raise EmptyList
        |Node(ele, subll) -> if ele = v 
                             then subll 
                             else Node(ele, (remove subll v))
end 
