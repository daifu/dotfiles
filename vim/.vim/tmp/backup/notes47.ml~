(* Exceptions on Ocaml *)
(* List.assoc :'q -> ('a * 'b) list -> 'b = <fun> *)
(* List.assoc 1 [(1,3);(4,5)] *)

exception NotFound

let rec assoc k assocL = 
   match k with
      [] -> 
         raise (NotFound "no value for key")
      | (key, v)::rest ->
            if key=k then v else (assoc k rest)

 (* Try e with exn1 -> e1 | ... | exnN -> eN
  * the exception error need to match the e1..
  * or exnN, then it will stop the program. *)

(* It use the local value *)
let addBindingIfNotAlreadyThere k v assocL =
   try
      let currVal = assoc k assocL in
         assocL
   with
      NotFound -> (k,v)::assocL

(* Scopping *)
(* ======= *)
(* For a given refreence to (or use of) a variable, which  *)
(* declaration doese it refer to? *)
(*  *)
(* -global declarations *)
(*  *)
(*  let x = 3;; *)
(*  let double n = n * 2;; *)
(*  *)
(* -local declarations *)
(*  let x = 3 in *)
(*    x + 4 *)
(*  *)
(* function parameters *)
(*    - n in the double function above *)

(* In all cases a above, can generalize to an arbitrary pattern p. *)

Static scooping is when the function is declaring
let x = 45;; 
let f y = x + y;;
let x = 12;;
examples: 
   x // 45
   f // 48 insteads of 15 because f is declare just after x = 45;;

Alternative is "dynamic scoping"
(* a variable use refers to the nearest enclosing definition *at the point of the  *)
(* use dynamically *)

let add =
   (function x -> 
      function y -> x + y)

addTwo 8 //Crash

the syntax of expressions:
   mlexp ::= n | b | not mlexp | v | let v = mlexp in mlexp
   n :: = int constant
   b::= boolean 
   v ::= variable

 not (not true) 
 represented by the tree
 Not(Not (Bool true))

type = mlexp = (*declare a new type*)
   Int of int
 | Bool of bool
 | Not of mlexp
 | Var of string
 | Let of string * mlexp * mlexp

 a value is the legal result of a computation.

let eval (e:mlexp)(env : (string*mlval) list) : mlval = 
   match e with
      | Int n -> IntVal n
      | Bool b -> BoolVal b
      | Not e0 -> let v0 = eval e0 in 
                     match v0 with 
                        | IntVal n -> raise EvlError
                        | BoolVal b -> BoolVal (not b)

(* We need an environment that represents the current scope. *)
(* We'll represent it as a mpa from strings to mlvals *)


                        
