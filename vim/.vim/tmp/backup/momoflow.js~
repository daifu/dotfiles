var tabDataPopup;
var closedTabsPopup;
const KEY = {
	LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40,
	ENTER: 13, SPACEBAR: 32
};
var obj = chrome.extension.getBackgroundPage();
tabDataPopup = obj.tabData;
closedTabsPopup = obj.closedTabs;

//The options for the extension, and they are stored in the localStorage
var VToptions = {
	reflection     : window.localStorage.getItem("reflection"),
	fadeInDistance : window.localStorage.getItem("fadeInDistance"),
	closeBt        : window.localStorage.getItem("closeButton"),
	thumbSize      : window.localStorage.getItem("thumbSize")
};

//The object that implement all the functions
CF = function(container, options) {
	var myCF        = this;
	var grid        = 5;
	var items       = [];
	var maxAngle    = 30;
	var loadedImgs  = 0;
	var selPosition = 0;
	var imgHeight   = {};

   //Scale the image to the customized size
   //tabId  : tab id,
   //obj    : image,
   //maxSize: size of the image
	function scaleTo(tabId, obj, maxSize) {
		var w    = obj.width;
		var h    = obj.height;
		var hFac = 0;
		var wFac = 0;
		var rate = w / h;
		if(VToptions.thumbSize == "true") {
			if(rate > 1)
				h = w / 1.12;
			if((1/rate) > 1)
				w = h / 1.12;
		}
		var fac = (w > h) ? maxSize / w : maxSize / h;
		hFac = h * fac;
		wFac = w * fac;
		imgHeight[tabId] = hFac;
		return {width: wFac, height: hFac}
	}
   
	myCF.center   = container.width() / 2;

   //Determine the right position of the image
   //offset : integer
	this.setPosition = function(offset) {
		if($(".close"))
			$(".close").remove();
		for(var i = items.length - 1, j = 0, k = items.length - 1; i >= 0; i--, j++) {
			items[i].moveToPosition(k - offset + j);
		}
	}
   
   //Determine the position of img when start
   //imgLength : the length of image array,
   //selectedId: the position of the center image
	this.loaded = function(imgLength, selectedId) {
		if (selectedId)
			selPosition = selectedId;
		if (++loadedImgs == imgLength)
			myCF.setPosition(imgLength - selPosition - 1);
	}

   //The object that implement animation and control
   //flagSelected : 1 if the user delete the tab,
   //tabWinid     : the window id for the tab,
   //tabPos       : the position of the tab in the tab array,
   //tabId        : the tab id,
   //imgLength    : the length of the image,
   //src          : the image source, it can be the binary source or the
   //               location of the file.
   //selectedId   : the current focus tab id
   //options      : a json object with options
	var CFItem = function(flagSelected, tabWinId, tabPos, tabId, imgLength, src, selectedId, options){
		var myself    = this;
		myself.canvi  = {};
		myself.angle  = 0;
		myself.left   = 0;
		myself.top    = 0;
		myself.index  = items.length; 

		var reflectionRatio = 0.6;
		var reflectivity    = 0.4;
		var maxSize         = Math.floor(container.height()/(1+reflectionRatio));

		var reflectionCanvas;
		var img          = document.createElement('img');
		var finalCanvas  = createCanvas();
		var finalContext = finalCanvas.getContext('2d');

		$(img).load(function() {
			reflectionCanvas   = drawReflection(img, maxSize, reflectionRatio, reflectivity, container.css('background-color'));
			finalCanvas.width  = reflectionCanvas.width;
			finalCanvas.height = reflectionCanvas.height;

			$(finalCanvas).css({
				position: 'absolute',
				zIndex  : items.length + 1,
				left    : -1000,
				width   : reflectionCanvas.width,
				height  : reflectionCanvas.height
			}).appendTo(container);

			$(finalCanvas).addClass("image_"+tabId);

			if(flagSelected)
			redraw(0, true);

			myCF.loaded(imgLength, selectedId);
		});

		img.src = src;

		if (options.onclick)
			$(finalCanvas).bind('click', function() {
				moveToTab();
			});

		if(options.onscroll)
			$(finalCanvas).bind("wheel", function(event, delta){
				navThumbNails(delta, tabPos);
			});


		//When user hover the middle tab will show the close image on the top right
		function addCloseImg(tabId) {
			var curTabId = parseInt($(finalCanvas).attr("class").substring(6));
			var leftPos = 400 + finalCanvas.width / 4;
			var topPos = 270 - imgHeight[tabId]; //calculate top heigh
			if($("#container").find("img").length == 0) {
				var closeImg = document.createElement("img");
				closeImg.src = "../images/close22.png";
				$(closeImg).addClass("close");
				$(closeImg).css({
					zIndex:   3000,
					position: 'absolute',
					top:      topPos,
					left:     leftPos,
					display:  'none'
					}).appendTo(container);
			}
			hoverCloseImg();
			closeTab(curTabId);
		}
      
      //When cursor hover the close image, update the image
		function hoverCloseImg() {
			$(finalCanvas).hover(function(){
				$(".close").fadeIn("slow").hover(function() {
					this.src = "../images/closeHovered.png";
				}, function(){
					this.src = "../images/close22.png";
				});
			});
		}
      
      //Close the tab when users click the close button
		function closeTab(tabId) {
			$(".close").bind("click", function() {
				myself.canvi = {}; //reset tab memory to null
				if(localStorage.view == "recent")
					chrome.tabs.remove(tabId, function() {});
				else {
					deleteClosedTab(tabId);
				}
			});
		}

      //Implement the navigation with the keyboards
		function navkeyboardCtr() {
			document.addEventListener('keydown', function(e) {
				var stTabPos;
				if (myself.angle == 0)
				stTabPos = tabPos;
				if (e.keyCode == KEY.LEFT || e.keyCode == KEY.UP) {
					var left = 1;
					navThumbNails(left, stTabPos);
				} else if(e.keyCode == KEY.RIGHT || e.keyCode == KEY.DOWN) {
					var right = -1;
					navThumbNails(right, stTabPos);
				}
			})
		}

      //Go the targeted tab when user press enter
		function enterMoveToTab() {
			document.addEventListener('keydown', function(e) {
				if ( myself.angle == 0 && (e.keyCode == KEY.ENTER || e.keyCode == KEY.SPACEBAR)) {
					moveToTab();
				}
			});
		}
      
      //move to the tab
		function moveToTab() {
			for(var i = 0, length = items.length; i < length; i++)
				items[i].canvi = {}; //reset tab memory to null;
			var tabId = parseInt($(finalCanvas).attr("class").substring(6));
			if(localStorage.view === "recent") {
				chrome.tabs.move(tabId, {windowId: parseInt(tabWinId), index: tabPos});
				chrome.tabs.update(tabId, {selected: true});
			} else {
				deleteClosedTab(tabId);
				chrome.tabs.create({windowId : tabWinId, url : tabDataPopup[tabId].url, selected : true});
			}
		}
      
      //Delete the closed tab
      //tabId : the tab id
		function deleteClosedTab(tabId) {
			var flag = 1;
			for(var i = 0; i < items.length && flag; i++) {
				if(closedTabsPopup[i].id == tabId) {
					closedTabsPopup.splice(i, 1);
					flag = 0;
				}
			}
			chrome.extension.sendRequest({info: "closeTab", tabId: tabId}, function(){});
		}
      
      //Control the mouse scrolling
      //delta : if mouse scroll up, delta > 0, or delta < 0 when mouse scroll
      //        down.
      //pos   : the position of the mouse in the image gallery
		function navThumbNails(delta, pos) {
			var up = imgLength - pos;
			var down = imgLength - 2- pos;

			if(delta > 0 && up < imgLength && up >= 0)
				myCF.setPosition(up);
			else if(delta < 0 && down >= 0 && down < imgLength)
				myCF.setPosition(down);
		} 
      
      //Redraw the images when users navigate the images
      //angle : the angle of the tab
      //show  : boolean, if the image is shown, true, or false
		function redraw(angle, show) {
			if (!myself.canvi[angle]) {
				var canvas    = createCanvas();
				canvas.width  = Math.floor(reflectionCanvas.width * Math.cos(angle * Math.PI / 180));
				canvas.height = reflectionCanvas.height;
				if(angle > 0)
					skew(canvas.getContext('2d'), reflectionCanvas, angle + 10);
				else if(angle < 0)
					skew(canvas.getContext('2d'), reflectionCanvas, angle - 11);
				else
					skew(canvas.getContext('2d'), reflectionCanvas, angle);
				myself.canvi[angle]  = canvas;
			} 

			if (show) {
				finalCanvas.style.width = myself.canvi[angle].width+"px";
				finalCanvas.width       = myself.canvi[angle].width;
				finalContext.clearRect(0, 0, reflectionCanvas.width, reflectionCanvas.height);
				finalContext.drawImage(myself.canvi[angle], 0, 0);
			}
		}
      
      //Create the Canvas
		function createCanvas(){
			var canvas = document.createElement('canvas');
			return canvas;
		}
      
      //Calcuate the space between two images
      //x : the left most position
      //dist: the size of the image 
		function spacer (x, dist){
			if (x==0) return 0;
			return 0.15 * dist * ((x<0) ? -1 : 1) * Math.sqrt(Math.abs(x));
		}
      
      //Display the title of tabs
      //tabId : tab id
		function showTitle(tabId) {
			if($("#container").find(".tabTitle").length > 0)
				$(".tabTitle").hide();
			
			var title = tabDataPopup[tabId].title ? tabDataPopup[tabId].title : "";
			if($("#container").find("#" + tabId + "_title").length == 0) {
				$("#container").append("<div id='"+tabId+"_title' class='tabTitle' style='color:" + options.titleColor + "; z-index:2100; top:330px; width:780px; position:absolute;'>"+title+"<div>");
			} else if($("#" + tabId + "_title").text() != title) {
				$("#" + tabId + "_title").text(title);
				$("#" + tabId + "_title").show();
			} else if($("#container").find("#" + tabId + "_title").length > 0)
				$("#" + tabId + "_title").show();
		}
     
      //Show the tab title when users hover the tab
		function HoverManager() {
			$(finalCanvas).hover(function(){
				var curTabId = parseInt($(finalCanvas).attr("class").substring(6));
				showTitle(curTabId);
				}, function(){});
		}
      
      //Animate the movement of the tabs, it is the most important part
      //val : the position of the tab 
		myself.moveToPosition = function(val){
			if (myself.animation) return;
			val = 30 * (val - imgLength + 1);
			var from  = {angle: myself.angle, left: myself.left, top: myself.top};
			var to    = {angle: Math.min(Math.max(val, -maxAngle), maxAngle) ,  left: val, top: (val == 0) ? 50 : 0 };
			var fps = 0;
			var lastAngle = myself.angle;
			myself.animation = jQuery(from).animate(to, {
				duration: options.speed,
				step: function() {
					fps++;
					var newAngle = (options.noTurn) ? 0 : Math.floor(this.angle);
					if (newAngle != lastAngle) {
						redraw(newAngle, true);
						lastAngle = newAngle;
					}
					$(finalCanvas).css({
						left:   Math.floor(myCF.center - spacer(this.left, maxSize) - finalCanvas.width/2 ),
						zIndex: 2000 - Math.floor(Math.abs(this.left))
					});
					if (options.comeToFront)      finalCanvas.style.top     = this.top+"px";
					if (VToptions.fadeInDistance == "true")   finalCanvas.style.opacity = Math.pow(0.99, Math.abs(newAngle));
				},
				complete: function(){
					myself.animation = null;
					myself.angle = Math.min(Math.max(val, -maxAngle), maxAngle); 
					myself.left  = val;
					myself.top   = (val == 0) ? 50 : 0;
					if (fps < 25) grid++;
					if (fps > 40 && grid > 3) grid --; 
					grid = 5; //reset grid, a bug in orignal code
					if(myself.angle == 0) {
						showTitle(tabId);
						if(VToptions.closeBt == "true" && localStorage.view === "recent")
							addCloseImg(tabId);
					}
				}
			});
		}
      
      //Draw the reflection of the image
		function drawReflection(img,  maxSize,  ratio,  reflectivity, backgroundColor){
			// examples:                300       0.5     0.5           #ffffff
			var s = scaleTo(tabId, img, maxSize);
			var w = s.width;
			var h = s.height;
			var offset = (w > h) ? (w - h) : 0;

			var canvas    = createCanvas();
			canvas.width  = w;
			canvas.height = Math.max(w, h) * (1 + ratio);
			ctx           = canvas.getContext('2d');

			// draw the reflection image
			if(VToptions.reflection == "true") {
				ctx.save();
				ctx.translate(0, offset + (2 * h));
				ctx.scale(1, -1);
				ctx.drawImage(img, 0, 0, w, h);
				ctx.restore();
				
				// create the gradient effect
				ctx.save();
				ctx.translate(0, offset + h);
				ctx.globalCompositeOperation = 'destination-out';
				var grad = ctx.createLinearGradient( 0, offset + 0, 0, h * ratio );
				grad.addColorStop(1, 'rgba(0, 0, 0, 1)');
				grad.addColorStop(0, 'rgba(0, 0, 0, '+(1-reflectivity)+')');
				ctx.fillStyle = grad;
				ctx.fillRect(0, 0, w, offset + h);

				// apply background color to the gradient
				ctx.globalCompositeOperation = 'destination-over';
				ctx.fillStyle   = backgroundColor;
				ctx.globalAlpha = 0.8;
				ctx.fillRect(0, 0 , w, h);
				ctx.restore();
			}

			// draw the image
			ctx.save();
			ctx.translate(0, 0);
			ctx.globalCompositeOperation = 'source-over';
			ctx.drawImage(img, 0, offset + 0, w, h);
			ctx.restore();

			canvas.geometry = { left: 0, top: offset, width: w, height: h };

			return canvas;
		}
      
      //Skew the images in different position, and it is the most expensive
      //function. TODO: it needs to improve
      //context : canvas.getContext object,
      //img     : image object,
      //angle   : the angle of the image
		function skew(context, img, angle) {
			var cos = Math.cos(angle * Math.PI / 180);
			if (cos <= 0) return;

			var w = img.width;
			var h = img.height;

			var w2 = w * cos;
			if (w2 < 1) return;

			var scalingFactor     = cos;

			var sliceNum          = w2 / grid;
			var sliceWidthOrigin  = w / sliceNum;

			var sliceWidthDest    = sliceWidthOrigin * w2 / w;
			var heightDelta       = h * ((1 - scalingFactor) / sliceNum);

			for(var n = 0; n < sliceNum; n++) {
				sx = Math.floor(sliceWidthOrigin * n);
				sy = 0;
				sw = Math.floor(sliceWidthOrigin);
				sh = h;

				dx = n * sliceWidthDest;
				dy = (angle > 0) ? ((heightDelta * n) / 3) : heightDelta * sliceNum / 3 - heightDelta * n /3; 
				dw = sliceWidthDest;
				dh = (angle > 0) ? h - (heightDelta * n) : h * scalingFactor + heightDelta * n;

				try {
					context.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh);	
				} catch (e) {
				}
			}
		}
	
		chrome.tabs.onRemoved.addListener(function(tabId){
			for(var i = 0, length = items.length; i < length; i++)
				items[i].canvi = {}; //reset tab memory to null;
		});
      
      navkeyboardCtr();
      enterMoveToTab();
      HoverManager();
	}

	function calcuateImgLength(ary, winId) {
		var sum = 0;
		jQuery.each(ary, function(index, a){
			if(a.windowId == winId)
			sum++;
		});
		return sum;
	}

	function init() {
		if(window.localStorage.view === "closed") {
			chrome.windows.getCurrent(function(win){
				var imgLength = calcuateImgLength(closedTabsPopup, win.id);
				var inx = 0;
				jQuery.each(closedTabsPopup, function(index, tab){
					if(tab.windowId == win.id) {
						var tabPosition = inx;
						var selectedId = imgLength - 1;
						var flagSelected = 1;
						var thumbNail = tab.thumbNail;
						items.push(new CFItem(flagSelected,
							tab.windowId,
							tabPosition,
							tab.id,
							imgLength,
							thumbNail,
							selectedId,
							{
								onclick:        options.onclick,
								onscroll:       true,
								lightBox:       options.lightBox,
								title:          options.title,
								titleColor:     options.titleColor
							}
						));
						inx++;
					}
				});
			});
			} else
			chrome.tabs.getAllInWindow(null, function(tabs){
				var imgLength = tabs.length;
				jQuery.each(tabs, function(index, tab){
					var tabPosition = tab.index;
					var flagSelected = 0;
					if(tab.selected) {
						var selectedId = tab.index;
						flagSelected = 1;
					}
					var thumbNail = tabDataPopup[tab.id].thumbNail;
					items.push(new CFItem(flagSelected,
						tab.windowId,
						tabPosition,
						tab.id,
						imgLength,
						thumbNail,
						selectedId,
						{
							onclick:        options.onclick,
							onscroll:       true,
							lightBox:       options.lightBox,
							title:          options.title,
							titleColor:     options.titleColor
						}
					));
				});
			});
		}

		init();
};
