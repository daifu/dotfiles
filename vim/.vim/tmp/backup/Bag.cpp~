// Bag.cpp

#include "Bag.h"
#include <cstddef>  // for NULL
#include <cassert>

void exchange(int& a, int& b)
{
    int t = a;
    a = b;
    b = t;
}

// To help clients detect any reliance on undefined iteration behavior,
// whenever we can, we invalidate access through the m_current pointer
// by setting it to NULL whenever the state of the iteration is not defined.

Bag::Bag()
 : m_uniqueSize(0), m_size(0), m_current(NULL)
{
      // create dummy node
    m_head = new Node;
    m_head->m_next = m_head;
    m_head->m_prev = m_head;
}

Bag::~Bag()
{
      // Delete the m_uniqueSize non-dummy nodes plus the dummy node

    for (Node* p = m_head->m_prev ; m_uniqueSize >= 0; m_uniqueSize--)
    {
	Node* toBeDeleted = p;
	p = p->m_prev;
	delete toBeDeleted;
    }
}

Bag::Bag(const Bag& other)
 : m_uniqueSize(other.m_uniqueSize), m_size(other.m_size), m_current(NULL)
{
      // Create dummy node; don't initialize its m_next

    m_head = new Node;
    m_head->m_prev = m_head;

      // Copy each node from the other list; each iteration will set the
      // m_next of the previous node copied

    for (Node* p = other.m_head->m_next ; p != other.m_head; p = p->m_next)
    {
	  // Create a copy of the node p points to
	Node* pnew = new Node;
	pnew->m_value = p->m_value;
	pnew->m_count = p->m_count;
	
	  // Connect the m_prev pointers
	pnew->m_prev = m_head->m_prev;
	m_head->m_prev = pnew;

	  // Connect the previous Node's m_next 
	pnew->m_prev->m_next = pnew;
    }

      // Connect the last Node's m_next 
    m_head->m_prev->m_next = m_head;
}

Bag& Bag::operator=(const Bag& rhs)
{
    if (this != &rhs)
    {
	Bag temp(rhs);
	swap(temp);
    }
    return *this;
}

bool Bag::insert(const ItemType& value)
{
    Node* p = find(value);

    if (p != m_head)  // found
        p->m_count++;
    else
    {
	  // Create a new node
	p = new Node;
	p->m_value = value;
	p->m_count = 1;

	  // Insert new item at tail of list (arbitrary choice of position)
	  //     Connect it to tail
	p->m_prev = m_head->m_prev;
	p->m_prev->m_next = p;

	  //     Connect it to dummy node
	p->m_next = m_head;
	m_head->m_prev = p;

	m_uniqueSize++;
    }

    m_size++;
    m_current = NULL;  // invalidate iteration -- list changed
    return true;
}

int Bag::count(const ItemType& value) const
{
    Node* p = find(value);
    return p == m_head ? 0 : p->m_count;
}

void Bag::swap(Bag& other)
{
      // swap head pointers
    Node* temp = m_head;
    m_head = other.m_head;
    other.m_head = temp;

      // swap uniqueSize and size
    exchange(m_uniqueSize, other.m_uniqueSize);
    exchange(m_size, other.m_size);

      // iterator state after swap is undefined.  Invalidate iteration.
    m_current = NULL;
    other.m_current = NULL;
}

Bag::Node* Bag::find(const ItemType& value) const
{
      // Do a linear search through the list

    Node* p;
    for (p = m_head->m_next; p != m_head && p->m_value != value; p = p->m_next)
	;
    return p;
}

int Bag::doErase(const ItemType& value, bool all)
{
    Node* p = find(value);

    if (p == m_head)  // not found
	return 0;

    int nErased = (all ? p->m_count : 1);  // number to erase

      // If erasing one, and there are more than one, just decrement;
      // otherwise, we're erasing all, or erasing one whose count is 1,
      // so unlink the Node from the list and destroy it

    if (!all  &&  p->m_count > 1)
	p->m_count--;
    else
    {
        p->m_prev->m_next = p->m_next;
        p->m_next->m_prev = p->m_prev;
        delete p;

        m_uniqueSize--;
    }

    m_size -= nErased;
    m_current = NULL;  // invalidate iteration -- list changed
    return nErased;
}

void combine(Bag& b1, Bag& b2, Bag& result)
{
      // Guard against the case that result is an alias for b1 or b2
      // (i.e., that result is a reference to the same bag that b1 or b2
      // refers to) by building the answer in a local variable res.  When
      // done, swap res with result; the old value of result (now in res) will
      // be destroyed when res is destroyed.

    Bag res(b1);
    for (b2.start(); !b2.ended(); b2.next())
    {
	for (int k = 0; k < b2.currentCount(); k++)
	    res.insert(b2.currentValue());
    }
    result.swap(res);
}

void subtract(Bag& b1, Bag& b2, Bag& result)
{
      // Guard against the case that result is an alias for b1 or b2
      // by building the answer in a local variable res.  When done, swap res
      // with result; the old value of result (now in res) will be destroyed
      // when res is destroyed.

    Bag res;
    for (b1.start(); !b1.ended(); b1.next())
    {
        int n = b1.currentCount() - b2.count(b1.currentValue());
	for (int k = 0; k < n; k++)
	    res.insert(b1.currentValue());
    }
    result.swap(res);
}

