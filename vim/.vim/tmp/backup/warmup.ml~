exception EmptyList

let rec isInList ele lst = 
   match lst with
   [] -> false 
   |x::xs -> if ele = x then true else (isInList ele xs)

let rec xhelper x count xL dim = 
   if count <= dim then
      (xhelper x (count+1) ((x, count)::xL) dim)
   else
     xL 

let rec yhelper y count yL dim= 
   if count <= dim then
      (if (isInList (count, y) yL)=false then
         yhelper y (count + 1) ((count, y)::yL) dim
      else
         (yhelper y (count + 1) yL dim))
   else
      yL


let rec removeDup prefix uniSuffix = 
   match prefix with
   [] -> uniSuffix 
   |hd::tl -> if (isInList hd uniSuffix) = false 
              then removeDup tl hd::uniSuffix 
              else removeDup tl uniSuffix 

let rec rookierook dim rocks lst acc = 
   match rocks with
      0 -> raise EmptyList 
    | _ -> match lst with
            [] -> acc 
          | (x, y)::rest -> let xL = (xhelper x 1 [] dim) in
                            let yL = (yhelper y 1 xL dim) in 
                            let acc = removeDup yL acc in
                            (rookierook dim rocks rest acc) 
          
                
